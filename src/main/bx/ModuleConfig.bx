/**
 * This is the module descriptor and entry point for your module in the runtime.
 * The unique name of the moduel is the name of the directory on the modules folder.
 * A BoxLang mapping will be created for you with the name of the module.
 *
 * A module can have the following folders that will be automatically registered:
 * + bifs - Custom BIFs that will be registered into the runtime
 * + interceptors - Custom interceptors that will be registered into the runtime via the configure() method
 * + libs - Custom java libraries that your module leverages
 * + tags - Custom tags that will be registered into the runtime
 *
 * Every module will have its own classloader that will be used to load the module libs and dependencies.
 */

class {

	/**
	 * --------------------------------------------------------------------------
	 * Injections
	 * --------------------------------------------------------------------------
	 */
	property name="moduleRecord";
	property name="boxRuntime";
	property name="functionService";
	property name="componentService";
	property name="interceptorService";
	property name="asyncService";
	property name="schedulerService";
	property name="datasourceService";
	property name="cacheService";
	property name="log";

	/**
	 * --------------------------------------------------------------------------
	 * Module Properties
	 * --------------------------------------------------------------------------
	 * Here is where you define the properties of your module that the module service
	 * will use to register and activate your module
	 */

	/**
	 * Your module version. Try to use semantic versioning
	 * @mandatory
	 */
	this.version = "@build.version@+@build.number@";

	/**
	 * The BoxLang mapping for your module.  All BoxLang modules are registered with an internal
	 * mapping prefix of : bxModules.{this.mapping}, /bxmodules/{this.mapping}. Ex: bxModules.test, /bxmodules/test
	 */
	this.mapping = "bxai";

	/**
	 * Who built the module
	 */
	this.author = "Luis Majano";

	/**
	 * The module description
	 */
	this.description = "This module does amazing things with AI";

	/**
	 * The module web URL
	 */
	this.webURL = "https://www.ortussolutions.com";

	/**
	 * This boolean flag tells the module service to skip the module registration/activation process.
	 */
	this.enabled = true;

	/**
	 * --------------------------------------------------------------------------
	 * Module Methods
	 * --------------------------------------------------------------------------
	 */

	/**
	 * Called by the ModuleService on module registration
	 */
	function configure(){
		settings = {
			// The default provider LLM AI: openai, deepseek, etc
			provider = "openai",
			// The default API Key for the provider
			apiKey = "",
			// The default request params to use when calling a provider
			// Ex: { temperature: 0.5, max_tokens: 100, model: "gpt-3.5-turbo" }
			defaultParams = {
			},
			// The default timeout of the ai requests
			timeout = 30,
			// If true, the AI request will be logged into the ai.log
			logRequest = false,
			// If true, the AI request will be logged to the console
			logRequestToConsole = false,
			// If true, the AI response will be logged into the ai.log
			logResponse = false,
			// If true, the AI response will be logged to the console
			logResponseToConsole = false,
			// The default return format of the AI response: single, all, raw
			returnFormat = "single"
		};

		/**
		 * The module interceptors to register into the runtime
		 */
		interceptors = [
			// { class="path.to.Interceptor", properties={} }
		];

		/**
		 * A list of custom interception points to register into the runtime
		 */
		customInterceptionPoints = [
			"onAIRequest",
			"onAIResponse",
			"onAIProviderRequest",
			"onAIProviderCreate",
			"onAIChatRequestCreate",
			"onAIChatMessageCreate"
		 ];
	}

	/**
	 * Called by the ModuleService on module activation
	 */
	function onLoad(){

	}

	/**
	 * Called by the ModuleService on module deactivation
	 */
	function onUnload(){

	}

	/**
	 * --------------------------------------------------------------------------
	 * Module Events
	 * --------------------------------------------------------------------------
	 * You can listen to any runtime events by creating the methods
	 * that match the approved runtime interception points
	 */

}
