/**
 * AI
 */
@BoxBIF
class {

	/**
	 * Inject the following references into the class
	 * - moduleRecord : The ModuleRecord instance
	 * - boxRuntime : The BoxRuntime instance
	 * - interceptorService : The BoxLang InterceptorService
	 * - log : A logger for the module config itself
	 */

    /**
     * AI chat
	 *
	 * @messages The messages to pass into the required model. This depends on the provider. It can be a simple string or an array of messages
	 * @model The model to override the default model in the settings
	 * @data A struct of data to pass into the request to the provider.
	 * @verbose By default it returns the first message from the provider. If you want to see all the messages, set this to true
     */
    function invoke(
		any messages,
		string model,
		struct data = {},
		boolean verbose = false
	) {
		arguments.type = "chat";
		return getProvider().invoke( argumentCollection = arguments );
	}

	/**
	 * Get the provider configured in the module settings
	 */
	private function getProvider() {
		switch( moduleRecord.settings.provider ) {
			case "openai":
				return new bxModules.bxai.models.OpenAIService();
			case "deepseek":
				return new bxModules.bxai.models.DeepSeekService();
			default:
				throw( "Provider [#moduleRecord.settings.provider#] is not supported.  Valid Providers are: openai, deepseek" );
		}
	}

}
