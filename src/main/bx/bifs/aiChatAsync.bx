/**
 * AI
 */
@BoxBIF
class extends="aiChat"{

	/**
	 * Inject the following references into the class
	 * - moduleRecord : The ModuleRecord instance
	 * - boxRuntime : The BoxRuntime instance
	 * - interceptorService : The BoxLang InterceptorService
	 * - log : A logger for the module config itself
	 */

    /**
     * Initiate an AI chat against the default or custom AI Provider.
	 * <p>
	 * The messages can be a simple string, a struct representing a message or an array of messages or an actual ChatMessage object
	 * <p>
	 * The <code>params</code> are a struct of request params to pass to the provider for the model request according to the provider: Ex	{ temperature: 0.5, max_tokens: 100, model: "gpt-3.5-turbo" }.
	 * You can also use default params in your Module configuration.
	 * <p>
	 * The <code>options</code> are a struct of request options to pass to the service for the model request. Available options are:
	 * <ul>
	 * <li>provider:string - The provider to use for the chat. If not passed, we will use the default from the configuration.</li>
	 * <li>apiKey:string - The API Key for the provider. If not passed, we will use the default from the configuration.</li>
	 * <li>timeout:numeric - The timeout in seconds for the request. The default is 30 seconds</li>
	 * <li>logResponse:boolean - Log the response into the ai.log. The default is false</li>
	 * <li>logRequest:boolean - Log the request into the ai.log. The default is false</li>
	 * <li>returnFormat:string - The return format of the response. The default is "single" message. Valid formats are: "single", "all", "raw"</li>
	 * </ul>
	 *
	 * @messages The messages to pass into the required model. This depends on the provider. It can be a simple string, a struct representing a message or an array of messages or an actual ChatMessage object
	 * @params A struct of request params to pass to the provider for the model request: Ex	{ temperature: 0.5, max_tokens: 100, model: "gpt-3.5-turbo" }
	 * @options A struct of request options to pass to the provider for the model request. Available options are: { provider:string, apiKey:string, returnFormat:string timeout:numeric, logResponse:boolean, logRequest:boolean }
	 *
	 * @throw InvalidArgument if the return format is not valid
	 *
	 * @return A BoxLang Future of the AI response
     */
    function invoke(
		required any messages,
		struct params = {},
		struct options = {}
	) {
		return futureNew( () => super.invoke( messages, params, options ) );
	}

}
