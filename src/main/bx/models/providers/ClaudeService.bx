class extends="BaseService"{

	/**
	 * Constructor
	 */
	function init(){
		variables.chatURL = "https://api.anthropic.com/v1/messages"
		variables.name = "Claude"
		// https://docs.anthropic.com/en/docs/agents-and-tools/tool-use/overview
		defaults( {
			// according to the docs, this is the default model and tokens
			// https://docs.anthropic.com/en/docs/about-claude/models/overview#model-aliases
			"model" : "claude-sonnet-4-0",
			"max_tokens": 1024,
			// https://docs.anthropic.com/en/api/versioning

		} )
		addHeader( name: "anthropic-version", value: "2023-06-01" )
	}

	/**
	 * Claude chat request
	 * Customized for Claude
	 * https://docs.anthropic.com/en/api/messages-examples
	 */
	@override
	public function chat( required ChatRequest chatRequest ){
		// No auth header, claude uses x-api-key
		arguments.chatRequest
			.setSendAuthHeader( false )
			.addHeader( "x-api-key", chatRequest.getApiKey() )

		// Build the packet according to Claude's API requirements
		// https://docs.anthropic.com/en/api/messages#body-messages
		var dataPacket = {
			"model"   : arguments.chatRequest.getModel(),
			"messages": arguments.chatRequest.getChatMessage().getNonSystemMessages()
		}.append( arguments.chatRequest.getParams() )

		// Do we have a system message? Claude supports it at the root
		if( arguments.chatRequest.getChatMessage().hasSystemMessage() ){
			dataPacket[ "system" ] = arguments.chatRequest.getChatMessage().getSystemMessage();
		}

		// Add tool support if tools are present
		if( chatRequest.getParams()?.tools?.len() ) {
			dataPacket[ "tools" ] = formatToolsForClaude( chatRequest.getParams().tools )
		}

		// Send it
		var result = sendRequest( chatRequest, dataPacket )

		// If an error is returned, throw it
		if( result.keyExists( "error" ) ){
			writeLog(
				text: result.error.toString(),
				type: "error",
				log : "ai"
			)
			throw(
				type   : "ProviderError",
				message: result.error.toString()
			);
		}

		// Handle tool use responses
		// Check if Claude wants to use tools
		var usingTools = false
		for( var contentBlock in result.content ) {
			if( contentBlock?.type == "tool_use" ) {
				usingTools = true;
				break;
			}
		}

		// If Claude wants to use tools, we need to handle that
		if( usingTools ){
			var toolCalls = result.content.filter( contentBlock -> contentBlock?.type == "tool_use" );

			// Add the role assistant message with tool calls
			chatRequest.getMessages().append({
				"role"    : "assistant",
				"content" : result.content
			});

			// Create a new chat request for each tool call
			for( var toolCall in toolCalls ) {
				// Execute the tool call
				executeClaudeTool( toolCall, chatRequest );
			}

			// Recursively call chat with the updated chat request
			return chat( chatRequest );
		}

		// Determine return formats
		switch( chatRequest.getReturnFormat() ){
			case "all":
				return result.content;
			case "raw":
				return result;
			case "single": default:
				return result.content.first().text;
		}
	}

	/**
	 * Format tools for Claude's specific tool format
	 * @see https://docs.anthropic.com/en/api/messages#body-tools
	 *
	 * @tools The tools to format
	 *
	 * @return An array of tools formatted for Claude
	 */
	private array function formatToolsForClaude( required array tools ) {
		var claudeTools = []

		for( var tool in arguments.tools ) {
			var argumentsSchema = tool.getArgumentsSchema();
			var claudeTool = {
				"name": tool.getName(),
				"description": tool.getDescription(),
				"input_schema": {
					"type": "object",
					"properties": argumentsSchema.properties,
					"required": argumentsSchema.required
				}
			}
			claudeTools.append( claudeTool )
		}

		return claudeTools
	}

	/**
	 * Execute Claude tool calls
	 *
	 * @toolCall The tool call object from Claude: { type:"tool_use", id: "", name: "toolName", input: {} }
	 * @chatRequest The original chat request containing the tool
	 */
	private function executeClaudeTool( required struct toolCall, required ChatRequest chatRequest ) {
		var messages = arguments.chatRequest.getMessages();

		// Get the tool from the chat request
		arguments.chatRequest
			.getTool( toolCall.name )
			.ifPresentOrElse(
				// Found, invoke the tool
				tool => {
					messages.append({
						"role" : "user",
						"content" : [{
							"type"        : "tool_result",
							"tool_use_id" : toolCall.id,
							"content"     : tool.invoke( args : toolCall.input )
						}]
					});
				},
				// Not found
				() => {
					writeLog(
						text: "Unable to find tool named: [#toolCall.name#]",
						type: "warning",
						log : "ai"
					)
					messages.append({
						"role" : "user",
						"content" : [{
							"type"        : "tool_result",
							"tool_use_id" : toolCall.id,
							"content"     : "Tool ['#toolCall.name#'] not found in chat request"
						}]
					});
				}
			);
	}

}
