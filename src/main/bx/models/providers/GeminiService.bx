class extends="BaseService"{

	/**
	 * Constructor
	 */
	function init(){
		variables.chatURL = "https://generativelanguage.googleapis.com/v1beta/models/%MODEL%:generateContent"
		variables.name = "Gemini"
		defaults( {
			// according to the docs, this is the default model
			"model" : "gemini-2.0-flash"
		} )
	}

	/**
	 * Gemini chat request
	 */
	@override
	public function chat( required ChatRequest chatRequest ){
		// We need to pre-process the messages to conform to the Gemini API
		var dataPacket = {
			"contents": arguments.chatRequest
				.getMessages()
				.map( message -> {
					return {
						"role" : message.role == "system" ? "model" : "user",
						"parts": [ {
							"text": message.content
						} ]
					}
				} )
			}.append( arguments.chatRequest.getParams() )

		// Tooling support
		if( dataPacket.keyExists( "tools" ) ){
			dataPacket.tools = dataPacket.tools.map( .getSchema )
		}

		// Update URL according to the model
		variables.chatURL = getChatUrl().replace( '%MODEL%', chatRequest.getModel() ) & '?key=#chatRequest.getApiKey()#';
		// No auth header
		arguments.chatRequest.setSendAuthHeader( false );

		// Send it
		var result = sendRequest( chatRequest, dataPacket )

		// If an error is returned, throw it
		if( result.keyExists( "error" ) ){
			throw(
				type   : "ProviderError",
				message: result.error.toString()
			);
		}

		// No Tool calls yet.

		// Determine return formats
		switch( chatRequest.getReturnFormat() ){
			case "all":
				return result.candidates;
			case "raw":
				return result;
			case "single": default:
				return result.candidates[ 1 ].content.parts[ 1 ].text
		}

		/**
		 * ---------------------------------------------------------------------------------------------------------
		 * Tool Chains
		 * ---------------------------------------------------------------------------------------------------------
		 * TODO by Jacob here.
		 */

	}

}
